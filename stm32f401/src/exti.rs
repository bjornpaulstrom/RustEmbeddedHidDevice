# ! [ doc = "External interrupt/event controller" ] # [ doc = r" Register block" ] # [ repr ( C ) ] pub struct Exti { # [ doc = "0x00 - Interrupt mask register (EXTI_IMR)" ] pub imr : Imr , # [ doc = "0x04 - Event mask register (EXTI_EMR)" ] pub emr : Emr , # [ doc = "0x08 - Rising Trigger selection register (EXTI_RTSR)" ] pub rtsr : Rtsr , # [ doc = "0x0c - Falling Trigger selection register (EXTI_FTSR)" ] pub ftsr : Ftsr , # [ doc = "0x10 - Software interrupt event register (EXTI_SWIER)" ] pub swier : Swier , # [ doc = "0x14 - Pending register (EXTI_PR)" ] pub pr : Pr }

# [ doc = "Interrupt mask register (EXTI_IMR)" ] # [ repr ( C ) ] pub struct Imr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Interrupt mask register (EXTI_IMR)" ] pub mod imr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Imr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field MR0" ] pub struct Mr0R { bits : u8 , } impl Mr0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR1" ] pub struct Mr1R { bits : u8 , } impl Mr1R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR2" ] pub struct Mr2R { bits : u8 , } impl Mr2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR3" ] pub struct Mr3R { bits : u8 , } impl Mr3R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR4" ] pub struct Mr4R { bits : u8 , } impl Mr4R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR5" ] pub struct Mr5R { bits : u8 , } impl Mr5R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR6" ] pub struct Mr6R { bits : u8 , } impl Mr6R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR7" ] pub struct Mr7R { bits : u8 , } impl Mr7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR8" ] pub struct Mr8R { bits : u8 , } impl Mr8R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR9" ] pub struct Mr9R { bits : u8 , } impl Mr9R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR10" ] pub struct Mr10R { bits : u8 , } impl Mr10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR11" ] pub struct Mr11R { bits : u8 , } impl Mr11R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR12" ] pub struct Mr12R { bits : u8 , } impl Mr12R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR13" ] pub struct Mr13R { bits : u8 , } impl Mr13R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR14" ] pub struct Mr14R { bits : u8 , } impl Mr14R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR15" ] pub struct Mr15R { bits : u8 , } impl Mr15R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR16" ] pub struct Mr16R { bits : u8 , } impl Mr16R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR17" ] pub struct Mr17R { bits : u8 , } impl Mr17R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR18" ] pub struct Mr18R { bits : u8 , } impl Mr18R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR19" ] pub struct Mr19R { bits : u8 , } impl Mr19R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR20" ] pub struct Mr20R { bits : u8 , } impl Mr20R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR21" ] pub struct Mr21R { bits : u8 , } impl Mr21R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR22" ] pub struct Mr22R { bits : u8 , } impl Mr22R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Mr0W < 'a > { register : & 'a mut W , } impl < 'a > _Mr0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr1W < 'a > { register : & 'a mut W , } impl < 'a > _Mr1W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr2W < 'a > { register : & 'a mut W , } impl < 'a > _Mr2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr3W < 'a > { register : & 'a mut W , } impl < 'a > _Mr3W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr4W < 'a > { register : & 'a mut W , } impl < 'a > _Mr4W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr5W < 'a > { register : & 'a mut W , } impl < 'a > _Mr5W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr6W < 'a > { register : & 'a mut W , } impl < 'a > _Mr6W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr7W < 'a > { register : & 'a mut W , } impl < 'a > _Mr7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr8W < 'a > { register : & 'a mut W , } impl < 'a > _Mr8W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr9W < 'a > { register : & 'a mut W , } impl < 'a > _Mr9W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr10W < 'a > { register : & 'a mut W , } impl < 'a > _Mr10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr11W < 'a > { register : & 'a mut W , } impl < 'a > _Mr11W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr12W < 'a > { register : & 'a mut W , } impl < 'a > _Mr12W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr13W < 'a > { register : & 'a mut W , } impl < 'a > _Mr13W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr14W < 'a > { register : & 'a mut W , } impl < 'a > _Mr14W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr15W < 'a > { register : & 'a mut W , } impl < 'a > _Mr15W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr16W < 'a > { register : & 'a mut W , } impl < 'a > _Mr16W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr17W < 'a > { register : & 'a mut W , } impl < 'a > _Mr17W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr18W < 'a > { register : & 'a mut W , } impl < 'a > _Mr18W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr19W < 'a > { register : & 'a mut W , } impl < 'a > _Mr19W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr20W < 'a > { register : & 'a mut W , } impl < 'a > _Mr20W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr21W < 'a > { register : & 'a mut W , } impl < 'a > _Mr21W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr22W < 'a > { register : & 'a mut W , } impl < 'a > _Mr22W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _mr0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Interrupt Mask on line 0" ] pub fn mr0 ( & self ) -> Mr0R { Mr0R { bits : self . _mr0 ( ) } } fn _mr1 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Interrupt Mask on line 1" ] pub fn mr1 ( & self ) -> Mr1R { Mr1R { bits : self . _mr1 ( ) } } fn _mr2 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Interrupt Mask on line 2" ] pub fn mr2 ( & self ) -> Mr2R { Mr2R { bits : self . _mr2 ( ) } } fn _mr3 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - Interrupt Mask on line 3" ] pub fn mr3 ( & self ) -> Mr3R { Mr3R { bits : self . _mr3 ( ) } } fn _mr4 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Interrupt Mask on line 4" ] pub fn mr4 ( & self ) -> Mr4R { Mr4R { bits : self . _mr4 ( ) } } fn _mr5 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - Interrupt Mask on line 5" ] pub fn mr5 ( & self ) -> Mr5R { Mr5R { bits : self . _mr5 ( ) } } fn _mr6 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Interrupt Mask on line 6" ] pub fn mr6 ( & self ) -> Mr6R { Mr6R { bits : self . _mr6 ( ) } } fn _mr7 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Interrupt Mask on line 7" ] pub fn mr7 ( & self ) -> Mr7R { Mr7R { bits : self . _mr7 ( ) } } fn _mr8 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Interrupt Mask on line 8" ] pub fn mr8 ( & self ) -> Mr8R { Mr8R { bits : self . _mr8 ( ) } } fn _mr9 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Interrupt Mask on line 9" ] pub fn mr9 ( & self ) -> Mr9R { Mr9R { bits : self . _mr9 ( ) } } fn _mr10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Interrupt Mask on line 10" ] pub fn mr10 ( & self ) -> Mr10R { Mr10R { bits : self . _mr10 ( ) } } fn _mr11 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Interrupt Mask on line 11" ] pub fn mr11 ( & self ) -> Mr11R { Mr11R { bits : self . _mr11 ( ) } } fn _mr12 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Interrupt Mask on line 12" ] pub fn mr12 ( & self ) -> Mr12R { Mr12R { bits : self . _mr12 ( ) } } fn _mr13 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - Interrupt Mask on line 13" ] pub fn mr13 ( & self ) -> Mr13R { Mr13R { bits : self . _mr13 ( ) } } fn _mr14 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Interrupt Mask on line 14" ] pub fn mr14 ( & self ) -> Mr14R { Mr14R { bits : self . _mr14 ( ) } } fn _mr15 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Interrupt Mask on line 15" ] pub fn mr15 ( & self ) -> Mr15R { Mr15R { bits : self . _mr15 ( ) } } fn _mr16 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 16 - Interrupt Mask on line 16" ] pub fn mr16 ( & self ) -> Mr16R { Mr16R { bits : self . _mr16 ( ) } } fn _mr17 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 17 - Interrupt Mask on line 17" ] pub fn mr17 ( & self ) -> Mr17R { Mr17R { bits : self . _mr17 ( ) } } fn _mr18 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 18 - Interrupt Mask on line 18" ] pub fn mr18 ( & self ) -> Mr18R { Mr18R { bits : self . _mr18 ( ) } } fn _mr19 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 19 - Interrupt Mask on line 19" ] pub fn mr19 ( & self ) -> Mr19R { Mr19R { bits : self . _mr19 ( ) } } fn _mr20 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 20 - Interrupt Mask on line 20" ] pub fn mr20 ( & self ) -> Mr20R { Mr20R { bits : self . _mr20 ( ) } } fn _mr21 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 21 - Interrupt Mask on line 21" ] pub fn mr21 ( & self ) -> Mr21R { Mr21R { bits : self . _mr21 ( ) } } fn _mr22 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 22 - Interrupt Mask on line 22" ] pub fn mr22 ( & self ) -> Mr22R { Mr22R { bits : self . _mr22 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Interrupt Mask on line 0" ] pub fn mr0 ( & mut self ) -> _Mr0W { _Mr0W { register : self , } } # [ doc = "Bit 1 - Interrupt Mask on line 1" ] pub fn mr1 ( & mut self ) -> _Mr1W { _Mr1W { register : self , } } # [ doc = "Bit 2 - Interrupt Mask on line 2" ] pub fn mr2 ( & mut self ) -> _Mr2W { _Mr2W { register : self , } } # [ doc = "Bit 3 - Interrupt Mask on line 3" ] pub fn mr3 ( & mut self ) -> _Mr3W { _Mr3W { register : self , } } # [ doc = "Bit 4 - Interrupt Mask on line 4" ] pub fn mr4 ( & mut self ) -> _Mr4W { _Mr4W { register : self , } } # [ doc = "Bit 5 - Interrupt Mask on line 5" ] pub fn mr5 ( & mut self ) -> _Mr5W { _Mr5W { register : self , } } # [ doc = "Bit 6 - Interrupt Mask on line 6" ] pub fn mr6 ( & mut self ) -> _Mr6W { _Mr6W { register : self , } } # [ doc = "Bit 7 - Interrupt Mask on line 7" ] pub fn mr7 ( & mut self ) -> _Mr7W { _Mr7W { register : self , } } # [ doc = "Bit 8 - Interrupt Mask on line 8" ] pub fn mr8 ( & mut self ) -> _Mr8W { _Mr8W { register : self , } } # [ doc = "Bit 9 - Interrupt Mask on line 9" ] pub fn mr9 ( & mut self ) -> _Mr9W { _Mr9W { register : self , } } # [ doc = "Bit 10 - Interrupt Mask on line 10" ] pub fn mr10 ( & mut self ) -> _Mr10W { _Mr10W { register : self , } } # [ doc = "Bit 11 - Interrupt Mask on line 11" ] pub fn mr11 ( & mut self ) -> _Mr11W { _Mr11W { register : self , } } # [ doc = "Bit 12 - Interrupt Mask on line 12" ] pub fn mr12 ( & mut self ) -> _Mr12W { _Mr12W { register : self , } } # [ doc = "Bit 13 - Interrupt Mask on line 13" ] pub fn mr13 ( & mut self ) -> _Mr13W { _Mr13W { register : self , } } # [ doc = "Bit 14 - Interrupt Mask on line 14" ] pub fn mr14 ( & mut self ) -> _Mr14W { _Mr14W { register : self , } } # [ doc = "Bit 15 - Interrupt Mask on line 15" ] pub fn mr15 ( & mut self ) -> _Mr15W { _Mr15W { register : self , } } # [ doc = "Bit 16 - Interrupt Mask on line 16" ] pub fn mr16 ( & mut self ) -> _Mr16W { _Mr16W { register : self , } } # [ doc = "Bit 17 - Interrupt Mask on line 17" ] pub fn mr17 ( & mut self ) -> _Mr17W { _Mr17W { register : self , } } # [ doc = "Bit 18 - Interrupt Mask on line 18" ] pub fn mr18 ( & mut self ) -> _Mr18W { _Mr18W { register : self , } } # [ doc = "Bit 19 - Interrupt Mask on line 19" ] pub fn mr19 ( & mut self ) -> _Mr19W { _Mr19W { register : self , } } # [ doc = "Bit 20 - Interrupt Mask on line 20" ] pub fn mr20 ( & mut self ) -> _Mr20W { _Mr20W { register : self , } } # [ doc = "Bit 21 - Interrupt Mask on line 21" ] pub fn mr21 ( & mut self ) -> _Mr21W { _Mr21W { register : self , } } # [ doc = "Bit 22 - Interrupt Mask on line 22" ] pub fn mr22 ( & mut self ) -> _Mr22W { _Mr22W { register : self , } } } }

# [ doc = "Event mask register (EXTI_EMR)" ] # [ repr ( C ) ] pub struct Emr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Event mask register (EXTI_EMR)" ] pub mod emr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Emr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field MR0" ] pub struct Mr0R { bits : u8 , } impl Mr0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR1" ] pub struct Mr1R { bits : u8 , } impl Mr1R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR2" ] pub struct Mr2R { bits : u8 , } impl Mr2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR3" ] pub struct Mr3R { bits : u8 , } impl Mr3R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR4" ] pub struct Mr4R { bits : u8 , } impl Mr4R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR5" ] pub struct Mr5R { bits : u8 , } impl Mr5R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR6" ] pub struct Mr6R { bits : u8 , } impl Mr6R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR7" ] pub struct Mr7R { bits : u8 , } impl Mr7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR8" ] pub struct Mr8R { bits : u8 , } impl Mr8R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR9" ] pub struct Mr9R { bits : u8 , } impl Mr9R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR10" ] pub struct Mr10R { bits : u8 , } impl Mr10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR11" ] pub struct Mr11R { bits : u8 , } impl Mr11R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR12" ] pub struct Mr12R { bits : u8 , } impl Mr12R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR13" ] pub struct Mr13R { bits : u8 , } impl Mr13R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR14" ] pub struct Mr14R { bits : u8 , } impl Mr14R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR15" ] pub struct Mr15R { bits : u8 , } impl Mr15R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR16" ] pub struct Mr16R { bits : u8 , } impl Mr16R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR17" ] pub struct Mr17R { bits : u8 , } impl Mr17R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR18" ] pub struct Mr18R { bits : u8 , } impl Mr18R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR19" ] pub struct Mr19R { bits : u8 , } impl Mr19R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR20" ] pub struct Mr20R { bits : u8 , } impl Mr20R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR21" ] pub struct Mr21R { bits : u8 , } impl Mr21R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MR22" ] pub struct Mr22R { bits : u8 , } impl Mr22R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Mr0W < 'a > { register : & 'a mut W , } impl < 'a > _Mr0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr1W < 'a > { register : & 'a mut W , } impl < 'a > _Mr1W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr2W < 'a > { register : & 'a mut W , } impl < 'a > _Mr2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr3W < 'a > { register : & 'a mut W , } impl < 'a > _Mr3W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr4W < 'a > { register : & 'a mut W , } impl < 'a > _Mr4W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr5W < 'a > { register : & 'a mut W , } impl < 'a > _Mr5W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr6W < 'a > { register : & 'a mut W , } impl < 'a > _Mr6W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr7W < 'a > { register : & 'a mut W , } impl < 'a > _Mr7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr8W < 'a > { register : & 'a mut W , } impl < 'a > _Mr8W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr9W < 'a > { register : & 'a mut W , } impl < 'a > _Mr9W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr10W < 'a > { register : & 'a mut W , } impl < 'a > _Mr10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr11W < 'a > { register : & 'a mut W , } impl < 'a > _Mr11W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr12W < 'a > { register : & 'a mut W , } impl < 'a > _Mr12W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr13W < 'a > { register : & 'a mut W , } impl < 'a > _Mr13W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr14W < 'a > { register : & 'a mut W , } impl < 'a > _Mr14W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr15W < 'a > { register : & 'a mut W , } impl < 'a > _Mr15W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr16W < 'a > { register : & 'a mut W , } impl < 'a > _Mr16W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr17W < 'a > { register : & 'a mut W , } impl < 'a > _Mr17W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr18W < 'a > { register : & 'a mut W , } impl < 'a > _Mr18W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr19W < 'a > { register : & 'a mut W , } impl < 'a > _Mr19W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr20W < 'a > { register : & 'a mut W , } impl < 'a > _Mr20W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr21W < 'a > { register : & 'a mut W , } impl < 'a > _Mr21W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Mr22W < 'a > { register : & 'a mut W , } impl < 'a > _Mr22W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _mr0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Event Mask on line 0" ] pub fn mr0 ( & self ) -> Mr0R { Mr0R { bits : self . _mr0 ( ) } } fn _mr1 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Event Mask on line 1" ] pub fn mr1 ( & self ) -> Mr1R { Mr1R { bits : self . _mr1 ( ) } } fn _mr2 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Event Mask on line 2" ] pub fn mr2 ( & self ) -> Mr2R { Mr2R { bits : self . _mr2 ( ) } } fn _mr3 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - Event Mask on line 3" ] pub fn mr3 ( & self ) -> Mr3R { Mr3R { bits : self . _mr3 ( ) } } fn _mr4 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Event Mask on line 4" ] pub fn mr4 ( & self ) -> Mr4R { Mr4R { bits : self . _mr4 ( ) } } fn _mr5 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - Event Mask on line 5" ] pub fn mr5 ( & self ) -> Mr5R { Mr5R { bits : self . _mr5 ( ) } } fn _mr6 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Event Mask on line 6" ] pub fn mr6 ( & self ) -> Mr6R { Mr6R { bits : self . _mr6 ( ) } } fn _mr7 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Event Mask on line 7" ] pub fn mr7 ( & self ) -> Mr7R { Mr7R { bits : self . _mr7 ( ) } } fn _mr8 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Event Mask on line 8" ] pub fn mr8 ( & self ) -> Mr8R { Mr8R { bits : self . _mr8 ( ) } } fn _mr9 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Event Mask on line 9" ] pub fn mr9 ( & self ) -> Mr9R { Mr9R { bits : self . _mr9 ( ) } } fn _mr10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Event Mask on line 10" ] pub fn mr10 ( & self ) -> Mr10R { Mr10R { bits : self . _mr10 ( ) } } fn _mr11 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Event Mask on line 11" ] pub fn mr11 ( & self ) -> Mr11R { Mr11R { bits : self . _mr11 ( ) } } fn _mr12 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Event Mask on line 12" ] pub fn mr12 ( & self ) -> Mr12R { Mr12R { bits : self . _mr12 ( ) } } fn _mr13 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - Event Mask on line 13" ] pub fn mr13 ( & self ) -> Mr13R { Mr13R { bits : self . _mr13 ( ) } } fn _mr14 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Event Mask on line 14" ] pub fn mr14 ( & self ) -> Mr14R { Mr14R { bits : self . _mr14 ( ) } } fn _mr15 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Event Mask on line 15" ] pub fn mr15 ( & self ) -> Mr15R { Mr15R { bits : self . _mr15 ( ) } } fn _mr16 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 16 - Event Mask on line 16" ] pub fn mr16 ( & self ) -> Mr16R { Mr16R { bits : self . _mr16 ( ) } } fn _mr17 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 17 - Event Mask on line 17" ] pub fn mr17 ( & self ) -> Mr17R { Mr17R { bits : self . _mr17 ( ) } } fn _mr18 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 18 - Event Mask on line 18" ] pub fn mr18 ( & self ) -> Mr18R { Mr18R { bits : self . _mr18 ( ) } } fn _mr19 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 19 - Event Mask on line 19" ] pub fn mr19 ( & self ) -> Mr19R { Mr19R { bits : self . _mr19 ( ) } } fn _mr20 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 20 - Event Mask on line 20" ] pub fn mr20 ( & self ) -> Mr20R { Mr20R { bits : self . _mr20 ( ) } } fn _mr21 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 21 - Event Mask on line 21" ] pub fn mr21 ( & self ) -> Mr21R { Mr21R { bits : self . _mr21 ( ) } } fn _mr22 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 22 - Event Mask on line 22" ] pub fn mr22 ( & self ) -> Mr22R { Mr22R { bits : self . _mr22 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Event Mask on line 0" ] pub fn mr0 ( & mut self ) -> _Mr0W { _Mr0W { register : self , } } # [ doc = "Bit 1 - Event Mask on line 1" ] pub fn mr1 ( & mut self ) -> _Mr1W { _Mr1W { register : self , } } # [ doc = "Bit 2 - Event Mask on line 2" ] pub fn mr2 ( & mut self ) -> _Mr2W { _Mr2W { register : self , } } # [ doc = "Bit 3 - Event Mask on line 3" ] pub fn mr3 ( & mut self ) -> _Mr3W { _Mr3W { register : self , } } # [ doc = "Bit 4 - Event Mask on line 4" ] pub fn mr4 ( & mut self ) -> _Mr4W { _Mr4W { register : self , } } # [ doc = "Bit 5 - Event Mask on line 5" ] pub fn mr5 ( & mut self ) -> _Mr5W { _Mr5W { register : self , } } # [ doc = "Bit 6 - Event Mask on line 6" ] pub fn mr6 ( & mut self ) -> _Mr6W { _Mr6W { register : self , } } # [ doc = "Bit 7 - Event Mask on line 7" ] pub fn mr7 ( & mut self ) -> _Mr7W { _Mr7W { register : self , } } # [ doc = "Bit 8 - Event Mask on line 8" ] pub fn mr8 ( & mut self ) -> _Mr8W { _Mr8W { register : self , } } # [ doc = "Bit 9 - Event Mask on line 9" ] pub fn mr9 ( & mut self ) -> _Mr9W { _Mr9W { register : self , } } # [ doc = "Bit 10 - Event Mask on line 10" ] pub fn mr10 ( & mut self ) -> _Mr10W { _Mr10W { register : self , } } # [ doc = "Bit 11 - Event Mask on line 11" ] pub fn mr11 ( & mut self ) -> _Mr11W { _Mr11W { register : self , } } # [ doc = "Bit 12 - Event Mask on line 12" ] pub fn mr12 ( & mut self ) -> _Mr12W { _Mr12W { register : self , } } # [ doc = "Bit 13 - Event Mask on line 13" ] pub fn mr13 ( & mut self ) -> _Mr13W { _Mr13W { register : self , } } # [ doc = "Bit 14 - Event Mask on line 14" ] pub fn mr14 ( & mut self ) -> _Mr14W { _Mr14W { register : self , } } # [ doc = "Bit 15 - Event Mask on line 15" ] pub fn mr15 ( & mut self ) -> _Mr15W { _Mr15W { register : self , } } # [ doc = "Bit 16 - Event Mask on line 16" ] pub fn mr16 ( & mut self ) -> _Mr16W { _Mr16W { register : self , } } # [ doc = "Bit 17 - Event Mask on line 17" ] pub fn mr17 ( & mut self ) -> _Mr17W { _Mr17W { register : self , } } # [ doc = "Bit 18 - Event Mask on line 18" ] pub fn mr18 ( & mut self ) -> _Mr18W { _Mr18W { register : self , } } # [ doc = "Bit 19 - Event Mask on line 19" ] pub fn mr19 ( & mut self ) -> _Mr19W { _Mr19W { register : self , } } # [ doc = "Bit 20 - Event Mask on line 20" ] pub fn mr20 ( & mut self ) -> _Mr20W { _Mr20W { register : self , } } # [ doc = "Bit 21 - Event Mask on line 21" ] pub fn mr21 ( & mut self ) -> _Mr21W { _Mr21W { register : self , } } # [ doc = "Bit 22 - Event Mask on line 22" ] pub fn mr22 ( & mut self ) -> _Mr22W { _Mr22W { register : self , } } } }

# [ doc = "Rising Trigger selection register (EXTI_RTSR)" ] # [ repr ( C ) ] pub struct Rtsr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Rising Trigger selection register (EXTI_RTSR)" ] pub mod rtsr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Rtsr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field TR0" ] pub struct Tr0R { bits : u8 , } impl Tr0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR1" ] pub struct Tr1R { bits : u8 , } impl Tr1R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR2" ] pub struct Tr2R { bits : u8 , } impl Tr2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR3" ] pub struct Tr3R { bits : u8 , } impl Tr3R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR4" ] pub struct Tr4R { bits : u8 , } impl Tr4R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR5" ] pub struct Tr5R { bits : u8 , } impl Tr5R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR6" ] pub struct Tr6R { bits : u8 , } impl Tr6R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR7" ] pub struct Tr7R { bits : u8 , } impl Tr7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR8" ] pub struct Tr8R { bits : u8 , } impl Tr8R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR9" ] pub struct Tr9R { bits : u8 , } impl Tr9R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR10" ] pub struct Tr10R { bits : u8 , } impl Tr10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR11" ] pub struct Tr11R { bits : u8 , } impl Tr11R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR12" ] pub struct Tr12R { bits : u8 , } impl Tr12R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR13" ] pub struct Tr13R { bits : u8 , } impl Tr13R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR14" ] pub struct Tr14R { bits : u8 , } impl Tr14R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR15" ] pub struct Tr15R { bits : u8 , } impl Tr15R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR16" ] pub struct Tr16R { bits : u8 , } impl Tr16R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR17" ] pub struct Tr17R { bits : u8 , } impl Tr17R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR18" ] pub struct Tr18R { bits : u8 , } impl Tr18R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR19" ] pub struct Tr19R { bits : u8 , } impl Tr19R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR20" ] pub struct Tr20R { bits : u8 , } impl Tr20R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR21" ] pub struct Tr21R { bits : u8 , } impl Tr21R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR22" ] pub struct Tr22R { bits : u8 , } impl Tr22R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Tr0W < 'a > { register : & 'a mut W , } impl < 'a > _Tr0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr1W < 'a > { register : & 'a mut W , } impl < 'a > _Tr1W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr2W < 'a > { register : & 'a mut W , } impl < 'a > _Tr2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr3W < 'a > { register : & 'a mut W , } impl < 'a > _Tr3W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr4W < 'a > { register : & 'a mut W , } impl < 'a > _Tr4W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr5W < 'a > { register : & 'a mut W , } impl < 'a > _Tr5W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr6W < 'a > { register : & 'a mut W , } impl < 'a > _Tr6W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr7W < 'a > { register : & 'a mut W , } impl < 'a > _Tr7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr8W < 'a > { register : & 'a mut W , } impl < 'a > _Tr8W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr9W < 'a > { register : & 'a mut W , } impl < 'a > _Tr9W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr10W < 'a > { register : & 'a mut W , } impl < 'a > _Tr10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr11W < 'a > { register : & 'a mut W , } impl < 'a > _Tr11W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr12W < 'a > { register : & 'a mut W , } impl < 'a > _Tr12W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr13W < 'a > { register : & 'a mut W , } impl < 'a > _Tr13W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr14W < 'a > { register : & 'a mut W , } impl < 'a > _Tr14W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr15W < 'a > { register : & 'a mut W , } impl < 'a > _Tr15W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr16W < 'a > { register : & 'a mut W , } impl < 'a > _Tr16W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr17W < 'a > { register : & 'a mut W , } impl < 'a > _Tr17W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr18W < 'a > { register : & 'a mut W , } impl < 'a > _Tr18W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr19W < 'a > { register : & 'a mut W , } impl < 'a > _Tr19W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr20W < 'a > { register : & 'a mut W , } impl < 'a > _Tr20W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr21W < 'a > { register : & 'a mut W , } impl < 'a > _Tr21W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr22W < 'a > { register : & 'a mut W , } impl < 'a > _Tr22W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _tr0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Rising trigger event configuration of line 0" ] pub fn tr0 ( & self ) -> Tr0R { Tr0R { bits : self . _tr0 ( ) } } fn _tr1 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Rising trigger event configuration of line 1" ] pub fn tr1 ( & self ) -> Tr1R { Tr1R { bits : self . _tr1 ( ) } } fn _tr2 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Rising trigger event configuration of line 2" ] pub fn tr2 ( & self ) -> Tr2R { Tr2R { bits : self . _tr2 ( ) } } fn _tr3 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - Rising trigger event configuration of line 3" ] pub fn tr3 ( & self ) -> Tr3R { Tr3R { bits : self . _tr3 ( ) } } fn _tr4 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Rising trigger event configuration of line 4" ] pub fn tr4 ( & self ) -> Tr4R { Tr4R { bits : self . _tr4 ( ) } } fn _tr5 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - Rising trigger event configuration of line 5" ] pub fn tr5 ( & self ) -> Tr5R { Tr5R { bits : self . _tr5 ( ) } } fn _tr6 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Rising trigger event configuration of line 6" ] pub fn tr6 ( & self ) -> Tr6R { Tr6R { bits : self . _tr6 ( ) } } fn _tr7 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Rising trigger event configuration of line 7" ] pub fn tr7 ( & self ) -> Tr7R { Tr7R { bits : self . _tr7 ( ) } } fn _tr8 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Rising trigger event configuration of line 8" ] pub fn tr8 ( & self ) -> Tr8R { Tr8R { bits : self . _tr8 ( ) } } fn _tr9 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Rising trigger event configuration of line 9" ] pub fn tr9 ( & self ) -> Tr9R { Tr9R { bits : self . _tr9 ( ) } } fn _tr10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Rising trigger event configuration of line 10" ] pub fn tr10 ( & self ) -> Tr10R { Tr10R { bits : self . _tr10 ( ) } } fn _tr11 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Rising trigger event configuration of line 11" ] pub fn tr11 ( & self ) -> Tr11R { Tr11R { bits : self . _tr11 ( ) } } fn _tr12 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Rising trigger event configuration of line 12" ] pub fn tr12 ( & self ) -> Tr12R { Tr12R { bits : self . _tr12 ( ) } } fn _tr13 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - Rising trigger event configuration of line 13" ] pub fn tr13 ( & self ) -> Tr13R { Tr13R { bits : self . _tr13 ( ) } } fn _tr14 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Rising trigger event configuration of line 14" ] pub fn tr14 ( & self ) -> Tr14R { Tr14R { bits : self . _tr14 ( ) } } fn _tr15 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Rising trigger event configuration of line 15" ] pub fn tr15 ( & self ) -> Tr15R { Tr15R { bits : self . _tr15 ( ) } } fn _tr16 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 16 - Rising trigger event configuration of line 16" ] pub fn tr16 ( & self ) -> Tr16R { Tr16R { bits : self . _tr16 ( ) } } fn _tr17 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 17 - Rising trigger event configuration of line 17" ] pub fn tr17 ( & self ) -> Tr17R { Tr17R { bits : self . _tr17 ( ) } } fn _tr18 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 18 - Rising trigger event configuration of line 18" ] pub fn tr18 ( & self ) -> Tr18R { Tr18R { bits : self . _tr18 ( ) } } fn _tr19 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 19 - Rising trigger event configuration of line 19" ] pub fn tr19 ( & self ) -> Tr19R { Tr19R { bits : self . _tr19 ( ) } } fn _tr20 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 20 - Rising trigger event configuration of line 20" ] pub fn tr20 ( & self ) -> Tr20R { Tr20R { bits : self . _tr20 ( ) } } fn _tr21 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 21 - Rising trigger event configuration of line 21" ] pub fn tr21 ( & self ) -> Tr21R { Tr21R { bits : self . _tr21 ( ) } } fn _tr22 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 22 - Rising trigger event configuration of line 22" ] pub fn tr22 ( & self ) -> Tr22R { Tr22R { bits : self . _tr22 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Rising trigger event configuration of line 0" ] pub fn tr0 ( & mut self ) -> _Tr0W { _Tr0W { register : self , } } # [ doc = "Bit 1 - Rising trigger event configuration of line 1" ] pub fn tr1 ( & mut self ) -> _Tr1W { _Tr1W { register : self , } } # [ doc = "Bit 2 - Rising trigger event configuration of line 2" ] pub fn tr2 ( & mut self ) -> _Tr2W { _Tr2W { register : self , } } # [ doc = "Bit 3 - Rising trigger event configuration of line 3" ] pub fn tr3 ( & mut self ) -> _Tr3W { _Tr3W { register : self , } } # [ doc = "Bit 4 - Rising trigger event configuration of line 4" ] pub fn tr4 ( & mut self ) -> _Tr4W { _Tr4W { register : self , } } # [ doc = "Bit 5 - Rising trigger event configuration of line 5" ] pub fn tr5 ( & mut self ) -> _Tr5W { _Tr5W { register : self , } } # [ doc = "Bit 6 - Rising trigger event configuration of line 6" ] pub fn tr6 ( & mut self ) -> _Tr6W { _Tr6W { register : self , } } # [ doc = "Bit 7 - Rising trigger event configuration of line 7" ] pub fn tr7 ( & mut self ) -> _Tr7W { _Tr7W { register : self , } } # [ doc = "Bit 8 - Rising trigger event configuration of line 8" ] pub fn tr8 ( & mut self ) -> _Tr8W { _Tr8W { register : self , } } # [ doc = "Bit 9 - Rising trigger event configuration of line 9" ] pub fn tr9 ( & mut self ) -> _Tr9W { _Tr9W { register : self , } } # [ doc = "Bit 10 - Rising trigger event configuration of line 10" ] pub fn tr10 ( & mut self ) -> _Tr10W { _Tr10W { register : self , } } # [ doc = "Bit 11 - Rising trigger event configuration of line 11" ] pub fn tr11 ( & mut self ) -> _Tr11W { _Tr11W { register : self , } } # [ doc = "Bit 12 - Rising trigger event configuration of line 12" ] pub fn tr12 ( & mut self ) -> _Tr12W { _Tr12W { register : self , } } # [ doc = "Bit 13 - Rising trigger event configuration of line 13" ] pub fn tr13 ( & mut self ) -> _Tr13W { _Tr13W { register : self , } } # [ doc = "Bit 14 - Rising trigger event configuration of line 14" ] pub fn tr14 ( & mut self ) -> _Tr14W { _Tr14W { register : self , } } # [ doc = "Bit 15 - Rising trigger event configuration of line 15" ] pub fn tr15 ( & mut self ) -> _Tr15W { _Tr15W { register : self , } } # [ doc = "Bit 16 - Rising trigger event configuration of line 16" ] pub fn tr16 ( & mut self ) -> _Tr16W { _Tr16W { register : self , } } # [ doc = "Bit 17 - Rising trigger event configuration of line 17" ] pub fn tr17 ( & mut self ) -> _Tr17W { _Tr17W { register : self , } } # [ doc = "Bit 18 - Rising trigger event configuration of line 18" ] pub fn tr18 ( & mut self ) -> _Tr18W { _Tr18W { register : self , } } # [ doc = "Bit 19 - Rising trigger event configuration of line 19" ] pub fn tr19 ( & mut self ) -> _Tr19W { _Tr19W { register : self , } } # [ doc = "Bit 20 - Rising trigger event configuration of line 20" ] pub fn tr20 ( & mut self ) -> _Tr20W { _Tr20W { register : self , } } # [ doc = "Bit 21 - Rising trigger event configuration of line 21" ] pub fn tr21 ( & mut self ) -> _Tr21W { _Tr21W { register : self , } } # [ doc = "Bit 22 - Rising trigger event configuration of line 22" ] pub fn tr22 ( & mut self ) -> _Tr22W { _Tr22W { register : self , } } } }

# [ doc = "Falling Trigger selection register (EXTI_FTSR)" ] # [ repr ( C ) ] pub struct Ftsr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Falling Trigger selection register (EXTI_FTSR)" ] pub mod ftsr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Ftsr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field TR0" ] pub struct Tr0R { bits : u8 , } impl Tr0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR1" ] pub struct Tr1R { bits : u8 , } impl Tr1R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR2" ] pub struct Tr2R { bits : u8 , } impl Tr2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR3" ] pub struct Tr3R { bits : u8 , } impl Tr3R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR4" ] pub struct Tr4R { bits : u8 , } impl Tr4R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR5" ] pub struct Tr5R { bits : u8 , } impl Tr5R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR6" ] pub struct Tr6R { bits : u8 , } impl Tr6R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR7" ] pub struct Tr7R { bits : u8 , } impl Tr7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR8" ] pub struct Tr8R { bits : u8 , } impl Tr8R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR9" ] pub struct Tr9R { bits : u8 , } impl Tr9R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR10" ] pub struct Tr10R { bits : u8 , } impl Tr10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR11" ] pub struct Tr11R { bits : u8 , } impl Tr11R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR12" ] pub struct Tr12R { bits : u8 , } impl Tr12R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR13" ] pub struct Tr13R { bits : u8 , } impl Tr13R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR14" ] pub struct Tr14R { bits : u8 , } impl Tr14R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR15" ] pub struct Tr15R { bits : u8 , } impl Tr15R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR16" ] pub struct Tr16R { bits : u8 , } impl Tr16R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR17" ] pub struct Tr17R { bits : u8 , } impl Tr17R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR18" ] pub struct Tr18R { bits : u8 , } impl Tr18R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR19" ] pub struct Tr19R { bits : u8 , } impl Tr19R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR20" ] pub struct Tr20R { bits : u8 , } impl Tr20R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR21" ] pub struct Tr21R { bits : u8 , } impl Tr21R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TR22" ] pub struct Tr22R { bits : u8 , } impl Tr22R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Tr0W < 'a > { register : & 'a mut W , } impl < 'a > _Tr0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr1W < 'a > { register : & 'a mut W , } impl < 'a > _Tr1W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr2W < 'a > { register : & 'a mut W , } impl < 'a > _Tr2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr3W < 'a > { register : & 'a mut W , } impl < 'a > _Tr3W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr4W < 'a > { register : & 'a mut W , } impl < 'a > _Tr4W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr5W < 'a > { register : & 'a mut W , } impl < 'a > _Tr5W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr6W < 'a > { register : & 'a mut W , } impl < 'a > _Tr6W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr7W < 'a > { register : & 'a mut W , } impl < 'a > _Tr7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr8W < 'a > { register : & 'a mut W , } impl < 'a > _Tr8W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr9W < 'a > { register : & 'a mut W , } impl < 'a > _Tr9W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr10W < 'a > { register : & 'a mut W , } impl < 'a > _Tr10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr11W < 'a > { register : & 'a mut W , } impl < 'a > _Tr11W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr12W < 'a > { register : & 'a mut W , } impl < 'a > _Tr12W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr13W < 'a > { register : & 'a mut W , } impl < 'a > _Tr13W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr14W < 'a > { register : & 'a mut W , } impl < 'a > _Tr14W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr15W < 'a > { register : & 'a mut W , } impl < 'a > _Tr15W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr16W < 'a > { register : & 'a mut W , } impl < 'a > _Tr16W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr17W < 'a > { register : & 'a mut W , } impl < 'a > _Tr17W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr18W < 'a > { register : & 'a mut W , } impl < 'a > _Tr18W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr19W < 'a > { register : & 'a mut W , } impl < 'a > _Tr19W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr20W < 'a > { register : & 'a mut W , } impl < 'a > _Tr20W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr21W < 'a > { register : & 'a mut W , } impl < 'a > _Tr21W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Tr22W < 'a > { register : & 'a mut W , } impl < 'a > _Tr22W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _tr0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Falling trigger event configuration of line 0" ] pub fn tr0 ( & self ) -> Tr0R { Tr0R { bits : self . _tr0 ( ) } } fn _tr1 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Falling trigger event configuration of line 1" ] pub fn tr1 ( & self ) -> Tr1R { Tr1R { bits : self . _tr1 ( ) } } fn _tr2 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Falling trigger event configuration of line 2" ] pub fn tr2 ( & self ) -> Tr2R { Tr2R { bits : self . _tr2 ( ) } } fn _tr3 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - Falling trigger event configuration of line 3" ] pub fn tr3 ( & self ) -> Tr3R { Tr3R { bits : self . _tr3 ( ) } } fn _tr4 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Falling trigger event configuration of line 4" ] pub fn tr4 ( & self ) -> Tr4R { Tr4R { bits : self . _tr4 ( ) } } fn _tr5 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - Falling trigger event configuration of line 5" ] pub fn tr5 ( & self ) -> Tr5R { Tr5R { bits : self . _tr5 ( ) } } fn _tr6 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Falling trigger event configuration of line 6" ] pub fn tr6 ( & self ) -> Tr6R { Tr6R { bits : self . _tr6 ( ) } } fn _tr7 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Falling trigger event configuration of line 7" ] pub fn tr7 ( & self ) -> Tr7R { Tr7R { bits : self . _tr7 ( ) } } fn _tr8 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Falling trigger event configuration of line 8" ] pub fn tr8 ( & self ) -> Tr8R { Tr8R { bits : self . _tr8 ( ) } } fn _tr9 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Falling trigger event configuration of line 9" ] pub fn tr9 ( & self ) -> Tr9R { Tr9R { bits : self . _tr9 ( ) } } fn _tr10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Falling trigger event configuration of line 10" ] pub fn tr10 ( & self ) -> Tr10R { Tr10R { bits : self . _tr10 ( ) } } fn _tr11 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Falling trigger event configuration of line 11" ] pub fn tr11 ( & self ) -> Tr11R { Tr11R { bits : self . _tr11 ( ) } } fn _tr12 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Falling trigger event configuration of line 12" ] pub fn tr12 ( & self ) -> Tr12R { Tr12R { bits : self . _tr12 ( ) } } fn _tr13 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - Falling trigger event configuration of line 13" ] pub fn tr13 ( & self ) -> Tr13R { Tr13R { bits : self . _tr13 ( ) } } fn _tr14 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Falling trigger event configuration of line 14" ] pub fn tr14 ( & self ) -> Tr14R { Tr14R { bits : self . _tr14 ( ) } } fn _tr15 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Falling trigger event configuration of line 15" ] pub fn tr15 ( & self ) -> Tr15R { Tr15R { bits : self . _tr15 ( ) } } fn _tr16 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 16 - Falling trigger event configuration of line 16" ] pub fn tr16 ( & self ) -> Tr16R { Tr16R { bits : self . _tr16 ( ) } } fn _tr17 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 17 - Falling trigger event configuration of line 17" ] pub fn tr17 ( & self ) -> Tr17R { Tr17R { bits : self . _tr17 ( ) } } fn _tr18 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 18 - Falling trigger event configuration of line 18" ] pub fn tr18 ( & self ) -> Tr18R { Tr18R { bits : self . _tr18 ( ) } } fn _tr19 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 19 - Falling trigger event configuration of line 19" ] pub fn tr19 ( & self ) -> Tr19R { Tr19R { bits : self . _tr19 ( ) } } fn _tr20 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 20 - Falling trigger event configuration of line 20" ] pub fn tr20 ( & self ) -> Tr20R { Tr20R { bits : self . _tr20 ( ) } } fn _tr21 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 21 - Falling trigger event configuration of line 21" ] pub fn tr21 ( & self ) -> Tr21R { Tr21R { bits : self . _tr21 ( ) } } fn _tr22 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 22 - Falling trigger event configuration of line 22" ] pub fn tr22 ( & self ) -> Tr22R { Tr22R { bits : self . _tr22 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Falling trigger event configuration of line 0" ] pub fn tr0 ( & mut self ) -> _Tr0W { _Tr0W { register : self , } } # [ doc = "Bit 1 - Falling trigger event configuration of line 1" ] pub fn tr1 ( & mut self ) -> _Tr1W { _Tr1W { register : self , } } # [ doc = "Bit 2 - Falling trigger event configuration of line 2" ] pub fn tr2 ( & mut self ) -> _Tr2W { _Tr2W { register : self , } } # [ doc = "Bit 3 - Falling trigger event configuration of line 3" ] pub fn tr3 ( & mut self ) -> _Tr3W { _Tr3W { register : self , } } # [ doc = "Bit 4 - Falling trigger event configuration of line 4" ] pub fn tr4 ( & mut self ) -> _Tr4W { _Tr4W { register : self , } } # [ doc = "Bit 5 - Falling trigger event configuration of line 5" ] pub fn tr5 ( & mut self ) -> _Tr5W { _Tr5W { register : self , } } # [ doc = "Bit 6 - Falling trigger event configuration of line 6" ] pub fn tr6 ( & mut self ) -> _Tr6W { _Tr6W { register : self , } } # [ doc = "Bit 7 - Falling trigger event configuration of line 7" ] pub fn tr7 ( & mut self ) -> _Tr7W { _Tr7W { register : self , } } # [ doc = "Bit 8 - Falling trigger event configuration of line 8" ] pub fn tr8 ( & mut self ) -> _Tr8W { _Tr8W { register : self , } } # [ doc = "Bit 9 - Falling trigger event configuration of line 9" ] pub fn tr9 ( & mut self ) -> _Tr9W { _Tr9W { register : self , } } # [ doc = "Bit 10 - Falling trigger event configuration of line 10" ] pub fn tr10 ( & mut self ) -> _Tr10W { _Tr10W { register : self , } } # [ doc = "Bit 11 - Falling trigger event configuration of line 11" ] pub fn tr11 ( & mut self ) -> _Tr11W { _Tr11W { register : self , } } # [ doc = "Bit 12 - Falling trigger event configuration of line 12" ] pub fn tr12 ( & mut self ) -> _Tr12W { _Tr12W { register : self , } } # [ doc = "Bit 13 - Falling trigger event configuration of line 13" ] pub fn tr13 ( & mut self ) -> _Tr13W { _Tr13W { register : self , } } # [ doc = "Bit 14 - Falling trigger event configuration of line 14" ] pub fn tr14 ( & mut self ) -> _Tr14W { _Tr14W { register : self , } } # [ doc = "Bit 15 - Falling trigger event configuration of line 15" ] pub fn tr15 ( & mut self ) -> _Tr15W { _Tr15W { register : self , } } # [ doc = "Bit 16 - Falling trigger event configuration of line 16" ] pub fn tr16 ( & mut self ) -> _Tr16W { _Tr16W { register : self , } } # [ doc = "Bit 17 - Falling trigger event configuration of line 17" ] pub fn tr17 ( & mut self ) -> _Tr17W { _Tr17W { register : self , } } # [ doc = "Bit 18 - Falling trigger event configuration of line 18" ] pub fn tr18 ( & mut self ) -> _Tr18W { _Tr18W { register : self , } } # [ doc = "Bit 19 - Falling trigger event configuration of line 19" ] pub fn tr19 ( & mut self ) -> _Tr19W { _Tr19W { register : self , } } # [ doc = "Bit 20 - Falling trigger event configuration of line 20" ] pub fn tr20 ( & mut self ) -> _Tr20W { _Tr20W { register : self , } } # [ doc = "Bit 21 - Falling trigger event configuration of line 21" ] pub fn tr21 ( & mut self ) -> _Tr21W { _Tr21W { register : self , } } # [ doc = "Bit 22 - Falling trigger event configuration of line 22" ] pub fn tr22 ( & mut self ) -> _Tr22W { _Tr22W { register : self , } } } }

# [ doc = "Software interrupt event register (EXTI_SWIER)" ] # [ repr ( C ) ] pub struct Swier { register : :: volatile_register :: RW < u32 > }

# [ doc = "Software interrupt event register (EXTI_SWIER)" ] pub mod swier { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Swier { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field SWIER0" ] pub struct Swier0R { bits : u8 , } impl Swier0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER1" ] pub struct Swier1R { bits : u8 , } impl Swier1R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER2" ] pub struct Swier2R { bits : u8 , } impl Swier2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER3" ] pub struct Swier3R { bits : u8 , } impl Swier3R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER4" ] pub struct Swier4R { bits : u8 , } impl Swier4R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER5" ] pub struct Swier5R { bits : u8 , } impl Swier5R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER6" ] pub struct Swier6R { bits : u8 , } impl Swier6R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER7" ] pub struct Swier7R { bits : u8 , } impl Swier7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER8" ] pub struct Swier8R { bits : u8 , } impl Swier8R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER9" ] pub struct Swier9R { bits : u8 , } impl Swier9R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER10" ] pub struct Swier10R { bits : u8 , } impl Swier10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER11" ] pub struct Swier11R { bits : u8 , } impl Swier11R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER12" ] pub struct Swier12R { bits : u8 , } impl Swier12R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER13" ] pub struct Swier13R { bits : u8 , } impl Swier13R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER14" ] pub struct Swier14R { bits : u8 , } impl Swier14R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER15" ] pub struct Swier15R { bits : u8 , } impl Swier15R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER16" ] pub struct Swier16R { bits : u8 , } impl Swier16R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER17" ] pub struct Swier17R { bits : u8 , } impl Swier17R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER18" ] pub struct Swier18R { bits : u8 , } impl Swier18R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER19" ] pub struct Swier19R { bits : u8 , } impl Swier19R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER20" ] pub struct Swier20R { bits : u8 , } impl Swier20R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER21" ] pub struct Swier21R { bits : u8 , } impl Swier21R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SWIER22" ] pub struct Swier22R { bits : u8 , } impl Swier22R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Swier0W < 'a > { register : & 'a mut W , } impl < 'a > _Swier0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier1W < 'a > { register : & 'a mut W , } impl < 'a > _Swier1W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier2W < 'a > { register : & 'a mut W , } impl < 'a > _Swier2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier3W < 'a > { register : & 'a mut W , } impl < 'a > _Swier3W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier4W < 'a > { register : & 'a mut W , } impl < 'a > _Swier4W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier5W < 'a > { register : & 'a mut W , } impl < 'a > _Swier5W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier6W < 'a > { register : & 'a mut W , } impl < 'a > _Swier6W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier7W < 'a > { register : & 'a mut W , } impl < 'a > _Swier7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier8W < 'a > { register : & 'a mut W , } impl < 'a > _Swier8W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier9W < 'a > { register : & 'a mut W , } impl < 'a > _Swier9W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier10W < 'a > { register : & 'a mut W , } impl < 'a > _Swier10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier11W < 'a > { register : & 'a mut W , } impl < 'a > _Swier11W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier12W < 'a > { register : & 'a mut W , } impl < 'a > _Swier12W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier13W < 'a > { register : & 'a mut W , } impl < 'a > _Swier13W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier14W < 'a > { register : & 'a mut W , } impl < 'a > _Swier14W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier15W < 'a > { register : & 'a mut W , } impl < 'a > _Swier15W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier16W < 'a > { register : & 'a mut W , } impl < 'a > _Swier16W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier17W < 'a > { register : & 'a mut W , } impl < 'a > _Swier17W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier18W < 'a > { register : & 'a mut W , } impl < 'a > _Swier18W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier19W < 'a > { register : & 'a mut W , } impl < 'a > _Swier19W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier20W < 'a > { register : & 'a mut W , } impl < 'a > _Swier20W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier21W < 'a > { register : & 'a mut W , } impl < 'a > _Swier21W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Swier22W < 'a > { register : & 'a mut W , } impl < 'a > _Swier22W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _swier0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Software Interrupt on line 0" ] pub fn swier0 ( & self ) -> Swier0R { Swier0R { bits : self . _swier0 ( ) } } fn _swier1 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Software Interrupt on line 1" ] pub fn swier1 ( & self ) -> Swier1R { Swier1R { bits : self . _swier1 ( ) } } fn _swier2 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Software Interrupt on line 2" ] pub fn swier2 ( & self ) -> Swier2R { Swier2R { bits : self . _swier2 ( ) } } fn _swier3 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - Software Interrupt on line 3" ] pub fn swier3 ( & self ) -> Swier3R { Swier3R { bits : self . _swier3 ( ) } } fn _swier4 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Software Interrupt on line 4" ] pub fn swier4 ( & self ) -> Swier4R { Swier4R { bits : self . _swier4 ( ) } } fn _swier5 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - Software Interrupt on line 5" ] pub fn swier5 ( & self ) -> Swier5R { Swier5R { bits : self . _swier5 ( ) } } fn _swier6 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Software Interrupt on line 6" ] pub fn swier6 ( & self ) -> Swier6R { Swier6R { bits : self . _swier6 ( ) } } fn _swier7 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Software Interrupt on line 7" ] pub fn swier7 ( & self ) -> Swier7R { Swier7R { bits : self . _swier7 ( ) } } fn _swier8 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Software Interrupt on line 8" ] pub fn swier8 ( & self ) -> Swier8R { Swier8R { bits : self . _swier8 ( ) } } fn _swier9 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Software Interrupt on line 9" ] pub fn swier9 ( & self ) -> Swier9R { Swier9R { bits : self . _swier9 ( ) } } fn _swier10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Software Interrupt on line 10" ] pub fn swier10 ( & self ) -> Swier10R { Swier10R { bits : self . _swier10 ( ) } } fn _swier11 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Software Interrupt on line 11" ] pub fn swier11 ( & self ) -> Swier11R { Swier11R { bits : self . _swier11 ( ) } } fn _swier12 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Software Interrupt on line 12" ] pub fn swier12 ( & self ) -> Swier12R { Swier12R { bits : self . _swier12 ( ) } } fn _swier13 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - Software Interrupt on line 13" ] pub fn swier13 ( & self ) -> Swier13R { Swier13R { bits : self . _swier13 ( ) } } fn _swier14 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Software Interrupt on line 14" ] pub fn swier14 ( & self ) -> Swier14R { Swier14R { bits : self . _swier14 ( ) } } fn _swier15 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Software Interrupt on line 15" ] pub fn swier15 ( & self ) -> Swier15R { Swier15R { bits : self . _swier15 ( ) } } fn _swier16 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 16 - Software Interrupt on line 16" ] pub fn swier16 ( & self ) -> Swier16R { Swier16R { bits : self . _swier16 ( ) } } fn _swier17 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 17 - Software Interrupt on line 17" ] pub fn swier17 ( & self ) -> Swier17R { Swier17R { bits : self . _swier17 ( ) } } fn _swier18 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 18 - Software Interrupt on line 18" ] pub fn swier18 ( & self ) -> Swier18R { Swier18R { bits : self . _swier18 ( ) } } fn _swier19 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 19 - Software Interrupt on line 19" ] pub fn swier19 ( & self ) -> Swier19R { Swier19R { bits : self . _swier19 ( ) } } fn _swier20 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 20 - Software Interrupt on line 20" ] pub fn swier20 ( & self ) -> Swier20R { Swier20R { bits : self . _swier20 ( ) } } fn _swier21 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 21 - Software Interrupt on line 21" ] pub fn swier21 ( & self ) -> Swier21R { Swier21R { bits : self . _swier21 ( ) } } fn _swier22 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 22 - Software Interrupt on line 22" ] pub fn swier22 ( & self ) -> Swier22R { Swier22R { bits : self . _swier22 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Software Interrupt on line 0" ] pub fn swier0 ( & mut self ) -> _Swier0W { _Swier0W { register : self , } } # [ doc = "Bit 1 - Software Interrupt on line 1" ] pub fn swier1 ( & mut self ) -> _Swier1W { _Swier1W { register : self , } } # [ doc = "Bit 2 - Software Interrupt on line 2" ] pub fn swier2 ( & mut self ) -> _Swier2W { _Swier2W { register : self , } } # [ doc = "Bit 3 - Software Interrupt on line 3" ] pub fn swier3 ( & mut self ) -> _Swier3W { _Swier3W { register : self , } } # [ doc = "Bit 4 - Software Interrupt on line 4" ] pub fn swier4 ( & mut self ) -> _Swier4W { _Swier4W { register : self , } } # [ doc = "Bit 5 - Software Interrupt on line 5" ] pub fn swier5 ( & mut self ) -> _Swier5W { _Swier5W { register : self , } } # [ doc = "Bit 6 - Software Interrupt on line 6" ] pub fn swier6 ( & mut self ) -> _Swier6W { _Swier6W { register : self , } } # [ doc = "Bit 7 - Software Interrupt on line 7" ] pub fn swier7 ( & mut self ) -> _Swier7W { _Swier7W { register : self , } } # [ doc = "Bit 8 - Software Interrupt on line 8" ] pub fn swier8 ( & mut self ) -> _Swier8W { _Swier8W { register : self , } } # [ doc = "Bit 9 - Software Interrupt on line 9" ] pub fn swier9 ( & mut self ) -> _Swier9W { _Swier9W { register : self , } } # [ doc = "Bit 10 - Software Interrupt on line 10" ] pub fn swier10 ( & mut self ) -> _Swier10W { _Swier10W { register : self , } } # [ doc = "Bit 11 - Software Interrupt on line 11" ] pub fn swier11 ( & mut self ) -> _Swier11W { _Swier11W { register : self , } } # [ doc = "Bit 12 - Software Interrupt on line 12" ] pub fn swier12 ( & mut self ) -> _Swier12W { _Swier12W { register : self , } } # [ doc = "Bit 13 - Software Interrupt on line 13" ] pub fn swier13 ( & mut self ) -> _Swier13W { _Swier13W { register : self , } } # [ doc = "Bit 14 - Software Interrupt on line 14" ] pub fn swier14 ( & mut self ) -> _Swier14W { _Swier14W { register : self , } } # [ doc = "Bit 15 - Software Interrupt on line 15" ] pub fn swier15 ( & mut self ) -> _Swier15W { _Swier15W { register : self , } } # [ doc = "Bit 16 - Software Interrupt on line 16" ] pub fn swier16 ( & mut self ) -> _Swier16W { _Swier16W { register : self , } } # [ doc = "Bit 17 - Software Interrupt on line 17" ] pub fn swier17 ( & mut self ) -> _Swier17W { _Swier17W { register : self , } } # [ doc = "Bit 18 - Software Interrupt on line 18" ] pub fn swier18 ( & mut self ) -> _Swier18W { _Swier18W { register : self , } } # [ doc = "Bit 19 - Software Interrupt on line 19" ] pub fn swier19 ( & mut self ) -> _Swier19W { _Swier19W { register : self , } } # [ doc = "Bit 20 - Software Interrupt on line 20" ] pub fn swier20 ( & mut self ) -> _Swier20W { _Swier20W { register : self , } } # [ doc = "Bit 21 - Software Interrupt on line 21" ] pub fn swier21 ( & mut self ) -> _Swier21W { _Swier21W { register : self , } } # [ doc = "Bit 22 - Software Interrupt on line 22" ] pub fn swier22 ( & mut self ) -> _Swier22W { _Swier22W { register : self , } } } }

# [ doc = "Pending register (EXTI_PR)" ] # [ repr ( C ) ] pub struct Pr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Pending register (EXTI_PR)" ] pub mod pr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Pr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field PR0" ] pub struct Pr0R { bits : u8 , } impl Pr0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR1" ] pub struct Pr1R { bits : u8 , } impl Pr1R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR2" ] pub struct Pr2R { bits : u8 , } impl Pr2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR3" ] pub struct Pr3R { bits : u8 , } impl Pr3R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR4" ] pub struct Pr4R { bits : u8 , } impl Pr4R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR5" ] pub struct Pr5R { bits : u8 , } impl Pr5R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR6" ] pub struct Pr6R { bits : u8 , } impl Pr6R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR7" ] pub struct Pr7R { bits : u8 , } impl Pr7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR8" ] pub struct Pr8R { bits : u8 , } impl Pr8R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR9" ] pub struct Pr9R { bits : u8 , } impl Pr9R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR10" ] pub struct Pr10R { bits : u8 , } impl Pr10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR11" ] pub struct Pr11R { bits : u8 , } impl Pr11R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR12" ] pub struct Pr12R { bits : u8 , } impl Pr12R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR13" ] pub struct Pr13R { bits : u8 , } impl Pr13R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR14" ] pub struct Pr14R { bits : u8 , } impl Pr14R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR15" ] pub struct Pr15R { bits : u8 , } impl Pr15R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR16" ] pub struct Pr16R { bits : u8 , } impl Pr16R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR17" ] pub struct Pr17R { bits : u8 , } impl Pr17R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR18" ] pub struct Pr18R { bits : u8 , } impl Pr18R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR19" ] pub struct Pr19R { bits : u8 , } impl Pr19R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR20" ] pub struct Pr20R { bits : u8 , } impl Pr20R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR21" ] pub struct Pr21R { bits : u8 , } impl Pr21R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PR22" ] pub struct Pr22R { bits : u8 , } impl Pr22R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Pr0W < 'a > { register : & 'a mut W , } impl < 'a > _Pr0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr1W < 'a > { register : & 'a mut W , } impl < 'a > _Pr1W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr2W < 'a > { register : & 'a mut W , } impl < 'a > _Pr2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr3W < 'a > { register : & 'a mut W , } impl < 'a > _Pr3W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr4W < 'a > { register : & 'a mut W , } impl < 'a > _Pr4W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr5W < 'a > { register : & 'a mut W , } impl < 'a > _Pr5W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr6W < 'a > { register : & 'a mut W , } impl < 'a > _Pr6W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr7W < 'a > { register : & 'a mut W , } impl < 'a > _Pr7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr8W < 'a > { register : & 'a mut W , } impl < 'a > _Pr8W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr9W < 'a > { register : & 'a mut W , } impl < 'a > _Pr9W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr10W < 'a > { register : & 'a mut W , } impl < 'a > _Pr10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr11W < 'a > { register : & 'a mut W , } impl < 'a > _Pr11W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr12W < 'a > { register : & 'a mut W , } impl < 'a > _Pr12W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr13W < 'a > { register : & 'a mut W , } impl < 'a > _Pr13W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr14W < 'a > { register : & 'a mut W , } impl < 'a > _Pr14W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr15W < 'a > { register : & 'a mut W , } impl < 'a > _Pr15W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr16W < 'a > { register : & 'a mut W , } impl < 'a > _Pr16W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr17W < 'a > { register : & 'a mut W , } impl < 'a > _Pr17W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr18W < 'a > { register : & 'a mut W , } impl < 'a > _Pr18W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr19W < 'a > { register : & 'a mut W , } impl < 'a > _Pr19W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr20W < 'a > { register : & 'a mut W , } impl < 'a > _Pr20W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr21W < 'a > { register : & 'a mut W , } impl < 'a > _Pr21W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Pr22W < 'a > { register : & 'a mut W , } impl < 'a > _Pr22W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _pr0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Pending bit 0" ] pub fn pr0 ( & self ) -> Pr0R { Pr0R { bits : self . _pr0 ( ) } } fn _pr1 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Pending bit 1" ] pub fn pr1 ( & self ) -> Pr1R { Pr1R { bits : self . _pr1 ( ) } } fn _pr2 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Pending bit 2" ] pub fn pr2 ( & self ) -> Pr2R { Pr2R { bits : self . _pr2 ( ) } } fn _pr3 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - Pending bit 3" ] pub fn pr3 ( & self ) -> Pr3R { Pr3R { bits : self . _pr3 ( ) } } fn _pr4 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Pending bit 4" ] pub fn pr4 ( & self ) -> Pr4R { Pr4R { bits : self . _pr4 ( ) } } fn _pr5 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - Pending bit 5" ] pub fn pr5 ( & self ) -> Pr5R { Pr5R { bits : self . _pr5 ( ) } } fn _pr6 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Pending bit 6" ] pub fn pr6 ( & self ) -> Pr6R { Pr6R { bits : self . _pr6 ( ) } } fn _pr7 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Pending bit 7" ] pub fn pr7 ( & self ) -> Pr7R { Pr7R { bits : self . _pr7 ( ) } } fn _pr8 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Pending bit 8" ] pub fn pr8 ( & self ) -> Pr8R { Pr8R { bits : self . _pr8 ( ) } } fn _pr9 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Pending bit 9" ] pub fn pr9 ( & self ) -> Pr9R { Pr9R { bits : self . _pr9 ( ) } } fn _pr10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Pending bit 10" ] pub fn pr10 ( & self ) -> Pr10R { Pr10R { bits : self . _pr10 ( ) } } fn _pr11 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Pending bit 11" ] pub fn pr11 ( & self ) -> Pr11R { Pr11R { bits : self . _pr11 ( ) } } fn _pr12 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Pending bit 12" ] pub fn pr12 ( & self ) -> Pr12R { Pr12R { bits : self . _pr12 ( ) } } fn _pr13 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - Pending bit 13" ] pub fn pr13 ( & self ) -> Pr13R { Pr13R { bits : self . _pr13 ( ) } } fn _pr14 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Pending bit 14" ] pub fn pr14 ( & self ) -> Pr14R { Pr14R { bits : self . _pr14 ( ) } } fn _pr15 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Pending bit 15" ] pub fn pr15 ( & self ) -> Pr15R { Pr15R { bits : self . _pr15 ( ) } } fn _pr16 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 16 - Pending bit 16" ] pub fn pr16 ( & self ) -> Pr16R { Pr16R { bits : self . _pr16 ( ) } } fn _pr17 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 17 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 17 - Pending bit 17" ] pub fn pr17 ( & self ) -> Pr17R { Pr17R { bits : self . _pr17 ( ) } } fn _pr18 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 18 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 18 - Pending bit 18" ] pub fn pr18 ( & self ) -> Pr18R { Pr18R { bits : self . _pr18 ( ) } } fn _pr19 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 19 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 19 - Pending bit 19" ] pub fn pr19 ( & self ) -> Pr19R { Pr19R { bits : self . _pr19 ( ) } } fn _pr20 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 20 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 20 - Pending bit 20" ] pub fn pr20 ( & self ) -> Pr20R { Pr20R { bits : self . _pr20 ( ) } } fn _pr21 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 21 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 21 - Pending bit 21" ] pub fn pr21 ( & self ) -> Pr21R { Pr21R { bits : self . _pr21 ( ) } } fn _pr22 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 22 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 22 - Pending bit 22" ] pub fn pr22 ( & self ) -> Pr22R { Pr22R { bits : self . _pr22 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 0 - Pending bit 0" ] pub fn pr0 ( & mut self ) -> _Pr0W { _Pr0W { register : self , } } # [ doc = "Bit 1 - Pending bit 1" ] pub fn pr1 ( & mut self ) -> _Pr1W { _Pr1W { register : self , } } # [ doc = "Bit 2 - Pending bit 2" ] pub fn pr2 ( & mut self ) -> _Pr2W { _Pr2W { register : self , } } # [ doc = "Bit 3 - Pending bit 3" ] pub fn pr3 ( & mut self ) -> _Pr3W { _Pr3W { register : self , } } # [ doc = "Bit 4 - Pending bit 4" ] pub fn pr4 ( & mut self ) -> _Pr4W { _Pr4W { register : self , } } # [ doc = "Bit 5 - Pending bit 5" ] pub fn pr5 ( & mut self ) -> _Pr5W { _Pr5W { register : self , } } # [ doc = "Bit 6 - Pending bit 6" ] pub fn pr6 ( & mut self ) -> _Pr6W { _Pr6W { register : self , } } # [ doc = "Bit 7 - Pending bit 7" ] pub fn pr7 ( & mut self ) -> _Pr7W { _Pr7W { register : self , } } # [ doc = "Bit 8 - Pending bit 8" ] pub fn pr8 ( & mut self ) -> _Pr8W { _Pr8W { register : self , } } # [ doc = "Bit 9 - Pending bit 9" ] pub fn pr9 ( & mut self ) -> _Pr9W { _Pr9W { register : self , } } # [ doc = "Bit 10 - Pending bit 10" ] pub fn pr10 ( & mut self ) -> _Pr10W { _Pr10W { register : self , } } # [ doc = "Bit 11 - Pending bit 11" ] pub fn pr11 ( & mut self ) -> _Pr11W { _Pr11W { register : self , } } # [ doc = "Bit 12 - Pending bit 12" ] pub fn pr12 ( & mut self ) -> _Pr12W { _Pr12W { register : self , } } # [ doc = "Bit 13 - Pending bit 13" ] pub fn pr13 ( & mut self ) -> _Pr13W { _Pr13W { register : self , } } # [ doc = "Bit 14 - Pending bit 14" ] pub fn pr14 ( & mut self ) -> _Pr14W { _Pr14W { register : self , } } # [ doc = "Bit 15 - Pending bit 15" ] pub fn pr15 ( & mut self ) -> _Pr15W { _Pr15W { register : self , } } # [ doc = "Bit 16 - Pending bit 16" ] pub fn pr16 ( & mut self ) -> _Pr16W { _Pr16W { register : self , } } # [ doc = "Bit 17 - Pending bit 17" ] pub fn pr17 ( & mut self ) -> _Pr17W { _Pr17W { register : self , } } # [ doc = "Bit 18 - Pending bit 18" ] pub fn pr18 ( & mut self ) -> _Pr18W { _Pr18W { register : self , } } # [ doc = "Bit 19 - Pending bit 19" ] pub fn pr19 ( & mut self ) -> _Pr19W { _Pr19W { register : self , } } # [ doc = "Bit 20 - Pending bit 20" ] pub fn pr20 ( & mut self ) -> _Pr20W { _Pr20W { register : self , } } # [ doc = "Bit 21 - Pending bit 21" ] pub fn pr21 ( & mut self ) -> _Pr21W { _Pr21W { register : self , } } # [ doc = "Bit 22 - Pending bit 22" ] pub fn pr22 ( & mut self ) -> _Pr22W { _Pr22W { register : self , } } } }
