# ! [ doc = "Inter-integrated circuit" ] # [ doc = r" Register block" ] # [ repr ( C ) ] pub struct I2c1 { # [ doc = "0x00 - Control register 1" ] pub cr1 : Cr1 , # [ doc = "0x04 - Control register 2" ] pub cr2 : Cr2 , # [ doc = "0x08 - Own address register 1" ] pub oar1 : Oar1 , # [ doc = "0x0c - Own address register 2" ] pub oar2 : Oar2 , # [ doc = "0x10 - Data register" ] pub dr : Dr , # [ doc = "0x14 - Status register 1" ] pub sr1 : Sr1 , # [ doc = "0x18 - Status register 2" ] pub sr2 : Sr2 , # [ doc = "0x1c - Clock control register" ] pub ccr : Ccr , # [ doc = "0x20 - TRISE register" ] pub trise : Trise }

# [ doc = "Control register 1" ] # [ repr ( C ) ] pub struct Cr1 { register : :: volatile_register :: RW < u32 > }

# [ doc = "Control register 1" ] pub mod cr1 { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Cr1 { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field SWRST" ] pub struct SwrstR { bits : u8 , } impl SwrstR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ALERT" ] pub struct AlertR { bits : u8 , } impl AlertR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PEC" ] pub struct PecR { bits : u8 , } impl PecR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field POS" ] pub struct PosR { bits : u8 , } impl PosR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ACK" ] pub struct AckR { bits : u8 , } impl AckR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field STOP" ] pub struct StopR { bits : u8 , } impl StopR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field START" ] pub struct StartR { bits : u8 , } impl StartR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field NOSTRETCH" ] pub struct NostretchR { bits : u8 , } impl NostretchR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ENGC" ] pub struct EngcR { bits : u8 , } impl EngcR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ENPEC" ] pub struct EnpecR { bits : u8 , } impl EnpecR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ENARP" ] pub struct EnarpR { bits : u8 , } impl EnarpR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SMBTYPE" ] pub struct SmbtypeR { bits : u8 , } impl SmbtypeR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SMBUS" ] pub struct SmbusR { bits : u8 , } impl SmbusR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PE" ] pub struct PeR { bits : u8 , } impl PeR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _SwrstW < 'a > { register : & 'a mut W , } impl < 'a > _SwrstW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _AlertW < 'a > { register : & 'a mut W , } impl < 'a > _AlertW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _PecW < 'a > { register : & 'a mut W , } impl < 'a > _PecW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _PosW < 'a > { register : & 'a mut W , } impl < 'a > _PosW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _AckW < 'a > { register : & 'a mut W , } impl < 'a > _AckW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _StopW < 'a > { register : & 'a mut W , } impl < 'a > _StopW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _StartW < 'a > { register : & 'a mut W , } impl < 'a > _StartW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _NostretchW < 'a > { register : & 'a mut W , } impl < 'a > _NostretchW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _EngcW < 'a > { register : & 'a mut W , } impl < 'a > _EngcW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _EnpecW < 'a > { register : & 'a mut W , } impl < 'a > _EnpecW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _EnarpW < 'a > { register : & 'a mut W , } impl < 'a > _EnarpW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _SmbtypeW < 'a > { register : & 'a mut W , } impl < 'a > _SmbtypeW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _SmbusW < 'a > { register : & 'a mut W , } impl < 'a > _SmbusW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _PeW < 'a > { register : & 'a mut W , } impl < 'a > _PeW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _swrst ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Software reset" ] pub fn swrst ( & self ) -> SwrstR { SwrstR { bits : self . _swrst ( ) } } fn _alert ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 13 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 13 - SMBus alert" ] pub fn alert ( & self ) -> AlertR { AlertR { bits : self . _alert ( ) } } fn _pec ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - Packet error checking" ] pub fn pec ( & self ) -> PecR { PecR { bits : self . _pec ( ) } } fn _pos ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Acknowledge/PEC Position (for data reception)" ] pub fn pos ( & self ) -> PosR { PosR { bits : self . _pos ( ) } } fn _ack ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Acknowledge enable" ] pub fn ack ( & self ) -> AckR { AckR { bits : self . _ack ( ) } } fn _stop ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Stop generation" ] pub fn stop ( & self ) -> StopR { StopR { bits : self . _stop ( ) } } fn _start ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Start generation" ] pub fn start ( & self ) -> StartR { StartR { bits : self . _start ( ) } } fn _nostretch ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Clock stretching disable (Slave mode)" ] pub fn nostretch ( & self ) -> NostretchR { NostretchR { bits : self . _nostretch ( ) } } fn _engc ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - General call enable" ] pub fn engc ( & self ) -> EngcR { EngcR { bits : self . _engc ( ) } } fn _enpec ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - PEC enable" ] pub fn enpec ( & self ) -> EnpecR { EnpecR { bits : self . _enpec ( ) } } fn _enarp ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - ARP enable" ] pub fn enarp ( & self ) -> EnarpR { EnarpR { bits : self . _enarp ( ) } } fn _smbtype ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - SMBus type" ] pub fn smbtype ( & self ) -> SmbtypeR { SmbtypeR { bits : self . _smbtype ( ) } } fn _smbus ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - SMBus mode" ] pub fn smbus ( & self ) -> SmbusR { SmbusR { bits : self . _smbus ( ) } } fn _pe ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Peripheral enable" ] pub fn pe ( & self ) -> PeR { PeR { bits : self . _pe ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 15 - Software reset" ] pub fn swrst ( & mut self ) -> _SwrstW { _SwrstW { register : self , } } # [ doc = "Bit 13 - SMBus alert" ] pub fn alert ( & mut self ) -> _AlertW { _AlertW { register : self , } } # [ doc = "Bit 12 - Packet error checking" ] pub fn pec ( & mut self ) -> _PecW { _PecW { register : self , } } # [ doc = "Bit 11 - Acknowledge/PEC Position (for data reception)" ] pub fn pos ( & mut self ) -> _PosW { _PosW { register : self , } } # [ doc = "Bit 10 - Acknowledge enable" ] pub fn ack ( & mut self ) -> _AckW { _AckW { register : self , } } # [ doc = "Bit 9 - Stop generation" ] pub fn stop ( & mut self ) -> _StopW { _StopW { register : self , } } # [ doc = "Bit 8 - Start generation" ] pub fn start ( & mut self ) -> _StartW { _StartW { register : self , } } # [ doc = "Bit 7 - Clock stretching disable (Slave mode)" ] pub fn nostretch ( & mut self ) -> _NostretchW { _NostretchW { register : self , } } # [ doc = "Bit 6 - General call enable" ] pub fn engc ( & mut self ) -> _EngcW { _EngcW { register : self , } } # [ doc = "Bit 5 - PEC enable" ] pub fn enpec ( & mut self ) -> _EnpecW { _EnpecW { register : self , } } # [ doc = "Bit 4 - ARP enable" ] pub fn enarp ( & mut self ) -> _EnarpW { _EnarpW { register : self , } } # [ doc = "Bit 3 - SMBus type" ] pub fn smbtype ( & mut self ) -> _SmbtypeW { _SmbtypeW { register : self , } } # [ doc = "Bit 1 - SMBus mode" ] pub fn smbus ( & mut self ) -> _SmbusW { _SmbusW { register : self , } } # [ doc = "Bit 0 - Peripheral enable" ] pub fn pe ( & mut self ) -> _PeW { _PeW { register : self , } } } }

# [ doc = "Control register 2" ] # [ repr ( C ) ] pub struct Cr2 { register : :: volatile_register :: RW < u32 > }

# [ doc = "Control register 2" ] pub mod cr2 { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Cr2 { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field LAST" ] pub struct LastR { bits : u8 , } impl LastR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field DMAEN" ] pub struct DmaenR { bits : u8 , } impl DmaenR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ITBUFEN" ] pub struct ItbufenR { bits : u8 , } impl ItbufenR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ITEVTEN" ] pub struct ItevtenR { bits : u8 , } impl ItevtenR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ITERREN" ] pub struct IterrenR { bits : u8 , } impl IterrenR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field FREQ" ] pub struct FreqR { bits : u8 , } impl FreqR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _LastW < 'a > { register : & 'a mut W , } impl < 'a > _LastW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _DmaenW < 'a > { register : & 'a mut W , } impl < 'a > _DmaenW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _ItbufenW < 'a > { register : & 'a mut W , } impl < 'a > _ItbufenW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _ItevtenW < 'a > { register : & 'a mut W , } impl < 'a > _ItevtenW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _IterrenW < 'a > { register : & 'a mut W , } impl < 'a > _IterrenW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _FreqW < 'a > { register : & 'a mut W , } impl < 'a > _FreqW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 63 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _last ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - DMA last transfer" ] pub fn last ( & self ) -> LastR { LastR { bits : self . _last ( ) } } fn _dmaen ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - DMA requests enable" ] pub fn dmaen ( & self ) -> DmaenR { DmaenR { bits : self . _dmaen ( ) } } fn _itbufen ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Buffer interrupt enable" ] pub fn itbufen ( & self ) -> ItbufenR { ItbufenR { bits : self . _itbufen ( ) } } fn _itevten ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Event interrupt enable" ] pub fn itevten ( & self ) -> ItevtenR { ItevtenR { bits : self . _itevten ( ) } } fn _iterren ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Error interrupt enable" ] pub fn iterren ( & self ) -> IterrenR { IterrenR { bits : self . _iterren ( ) } } fn _freq ( & self ) -> u8 { const MASK : u8 = 63 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 0:5 - Peripheral clock frequency" ] pub fn freq ( & self ) -> FreqR { FreqR { bits : self . _freq ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 12 - DMA last transfer" ] pub fn last ( & mut self ) -> _LastW { _LastW { register : self , } } # [ doc = "Bit 11 - DMA requests enable" ] pub fn dmaen ( & mut self ) -> _DmaenW { _DmaenW { register : self , } } # [ doc = "Bit 10 - Buffer interrupt enable" ] pub fn itbufen ( & mut self ) -> _ItbufenW { _ItbufenW { register : self , } } # [ doc = "Bit 9 - Event interrupt enable" ] pub fn itevten ( & mut self ) -> _ItevtenW { _ItevtenW { register : self , } } # [ doc = "Bit 8 - Error interrupt enable" ] pub fn iterren ( & mut self ) -> _IterrenW { _IterrenW { register : self , } } # [ doc = "Bits 0:5 - Peripheral clock frequency" ] pub fn freq ( & mut self ) -> _FreqW { _FreqW { register : self , } } } }

# [ doc = "Own address register 1" ] # [ repr ( C ) ] pub struct Oar1 { register : :: volatile_register :: RW < u32 > }

# [ doc = "Own address register 1" ] pub mod oar1 { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Oar1 { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field ADDMODE" ] pub struct AddmodeR { bits : u8 , } impl AddmodeR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ADD10" ] pub struct Add10R { bits : u8 , } impl Add10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ADD7" ] pub struct Add7R { bits : u8 , } impl Add7R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ADD0" ] pub struct Add0R { bits : u8 , } impl Add0R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _AddmodeW < 'a > { register : & 'a mut W , } impl < 'a > _AddmodeW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Add10W < 'a > { register : & 'a mut W , } impl < 'a > _Add10W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Add7W < 'a > { register : & 'a mut W , } impl < 'a > _Add7W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 127 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _Add0W < 'a > { register : & 'a mut W , } impl < 'a > _Add0W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _addmode ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - Addressing mode (slave mode)" ] pub fn addmode ( & self ) -> AddmodeR { AddmodeR { bits : self . _addmode ( ) } } fn _add10 ( & self ) -> u8 { const MASK : u8 = 3 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 8:9 - Interface address" ] pub fn add10 ( & self ) -> Add10R { Add10R { bits : self . _add10 ( ) } } fn _add7 ( & self ) -> u8 { const MASK : u8 = 127 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 1:7 - Interface address" ] pub fn add7 ( & self ) -> Add7R { Add7R { bits : self . _add7 ( ) } } fn _add0 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Interface address" ] pub fn add0 ( & self ) -> Add0R { Add0R { bits : self . _add0 ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 15 - Addressing mode (slave mode)" ] pub fn addmode ( & mut self ) -> _AddmodeW { _AddmodeW { register : self , } } # [ doc = "Bits 8:9 - Interface address" ] pub fn add10 ( & mut self ) -> _Add10W { _Add10W { register : self , } } # [ doc = "Bits 1:7 - Interface address" ] pub fn add7 ( & mut self ) -> _Add7W { _Add7W { register : self , } } # [ doc = "Bit 0 - Interface address" ] pub fn add0 ( & mut self ) -> _Add0W { _Add0W { register : self , } } } }

# [ doc = "Own address register 2" ] # [ repr ( C ) ] pub struct Oar2 { register : :: volatile_register :: RW < u32 > }

# [ doc = "Own address register 2" ] pub mod oar2 { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Oar2 { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field ADD2" ] pub struct Add2R { bits : u8 , } impl Add2R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ENDUAL" ] pub struct EndualR { bits : u8 , } impl EndualR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _Add2W < 'a > { register : & 'a mut W , } impl < 'a > _Add2W < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 127 ; const OFFSET : u8 = 1 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _EndualW < 'a > { register : & 'a mut W , } impl < 'a > _EndualW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _add2 ( & self ) -> u8 { const MASK : u8 = 127 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 1:7 - Interface address" ] pub fn add2 ( & self ) -> Add2R { Add2R { bits : self . _add2 ( ) } } fn _endual ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Dual addressing mode enable" ] pub fn endual ( & self ) -> EndualR { EndualR { bits : self . _endual ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 1:7 - Interface address" ] pub fn add2 ( & mut self ) -> _Add2W { _Add2W { register : self , } } # [ doc = "Bit 0 - Dual addressing mode enable" ] pub fn endual ( & mut self ) -> _EndualW { _EndualW { register : self , } } } }

# [ doc = "Data register" ] # [ repr ( C ) ] pub struct Dr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Data register" ] pub mod dr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Dr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field DR" ] pub struct DrR { bits : u8 , } impl DrR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _DrW < 'a > { register : & 'a mut W , } impl < 'a > _DrW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 255 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _dr ( & self ) -> u8 { const MASK : u8 = 255 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 0:7 - 8-bit data register" ] pub fn dr ( & self ) -> DrR { DrR { bits : self . _dr ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 0:7 - 8-bit data register" ] pub fn dr ( & mut self ) -> _DrW { _DrW { register : self , } } } }

# [ doc = "Status register 1" ] # [ repr ( C ) ] pub struct Sr1 { register : :: volatile_register :: RW < u32 > }

# [ doc = "Status register 1" ] pub mod sr1 { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Sr1 { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field SMBALERT" ] pub struct SmbalertR { bits : u8 , } impl SmbalertR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TIMEOUT" ] pub struct TimeoutR { bits : u8 , } impl TimeoutR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field PECERR" ] pub struct PecerrR { bits : u8 , } impl PecerrR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field OVR" ] pub struct OvrR { bits : u8 , } impl OvrR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field AF" ] pub struct AfR { bits : u8 , } impl AfR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ARLO" ] pub struct ArloR { bits : u8 , } impl ArloR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field BERR" ] pub struct BerrR { bits : u8 , } impl BerrR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TxE" ] pub struct TxER { bits : u8 , } impl TxER { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field RxNE" ] pub struct RxNeR { bits : u8 , } impl RxNeR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field STOPF" ] pub struct StopfR { bits : u8 , } impl StopfR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ADD10" ] pub struct Add10R { bits : u8 , } impl Add10R { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field BTF" ] pub struct BtfR { bits : u8 , } impl BtfR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field ADDR" ] pub struct AddrR { bits : u8 , } impl AddrR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SB" ] pub struct SbR { bits : u8 , } impl SbR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _SmbalertW < 'a > { register : & 'a mut W , } impl < 'a > _SmbalertW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _TimeoutW < 'a > { register : & 'a mut W , } impl < 'a > _TimeoutW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _PecerrW < 'a > { register : & 'a mut W , } impl < 'a > _PecerrW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _OvrW < 'a > { register : & 'a mut W , } impl < 'a > _OvrW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _AfW < 'a > { register : & 'a mut W , } impl < 'a > _AfW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _ArloW < 'a > { register : & 'a mut W , } impl < 'a > _ArloW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _BerrW < 'a > { register : & 'a mut W , } impl < 'a > _BerrW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _smbalert ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - SMBus alert" ] pub fn smbalert ( & self ) -> SmbalertR { SmbalertR { bits : self . _smbalert ( ) } } fn _timeout ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Timeout or Tlow error" ] pub fn timeout ( & self ) -> TimeoutR { TimeoutR { bits : self . _timeout ( ) } } fn _pecerr ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 12 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 12 - PEC Error in reception" ] pub fn pecerr ( & self ) -> PecerrR { PecerrR { bits : self . _pecerr ( ) } } fn _ovr ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 11 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 11 - Overrun/Underrun" ] pub fn ovr ( & self ) -> OvrR { OvrR { bits : self . _ovr ( ) } } fn _af ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 10 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 10 - Acknowledge failure" ] pub fn af ( & self ) -> AfR { AfR { bits : self . _af ( ) } } fn _arlo ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 9 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 9 - Arbitration lost (master mode)" ] pub fn arlo ( & self ) -> ArloR { ArloR { bits : self . _arlo ( ) } } fn _berr ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 8 - Bus error" ] pub fn berr ( & self ) -> BerrR { BerrR { bits : self . _berr ( ) } } fn _tx_e ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Data register empty (transmitters)" ] pub fn tx_e ( & self ) -> TxER { TxER { bits : self . _tx_e ( ) } } fn _rx_ne ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - Data register not empty (receivers)" ] pub fn rx_ne ( & self ) -> RxNeR { RxNeR { bits : self . _rx_ne ( ) } } fn _stopf ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - Stop detection (slave mode)" ] pub fn stopf ( & self ) -> StopfR { StopfR { bits : self . _stopf ( ) } } fn _add10 ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 3 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 3 - 10-bit header sent (Master mode)" ] pub fn add10 ( & self ) -> Add10R { Add10R { bits : self . _add10 ( ) } } fn _btf ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Byte transfer finished" ] pub fn btf ( & self ) -> BtfR { BtfR { bits : self . _btf ( ) } } fn _addr ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Address sent (master mode)/matched (slave mode)" ] pub fn addr ( & self ) -> AddrR { AddrR { bits : self . _addr ( ) } } fn _sb ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Start bit (Master mode)" ] pub fn sb ( & self ) -> SbR { SbR { bits : self . _sb ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 15 - SMBus alert" ] pub fn smbalert ( & mut self ) -> _SmbalertW { _SmbalertW { register : self , } } # [ doc = "Bit 14 - Timeout or Tlow error" ] pub fn timeout ( & mut self ) -> _TimeoutW { _TimeoutW { register : self , } } # [ doc = "Bit 12 - PEC Error in reception" ] pub fn pecerr ( & mut self ) -> _PecerrW { _PecerrW { register : self , } } # [ doc = "Bit 11 - Overrun/Underrun" ] pub fn ovr ( & mut self ) -> _OvrW { _OvrW { register : self , } } # [ doc = "Bit 10 - Acknowledge failure" ] pub fn af ( & mut self ) -> _AfW { _AfW { register : self , } } # [ doc = "Bit 9 - Arbitration lost (master mode)" ] pub fn arlo ( & mut self ) -> _ArloW { _ArloW { register : self , } } # [ doc = "Bit 8 - Bus error" ] pub fn berr ( & mut self ) -> _BerrW { _BerrW { register : self , } } } }

# [ doc = "Status register 2" ] # [ repr ( C ) ] pub struct Sr2 { register : :: volatile_register :: RO < u32 > }

# [ doc = "Status register 2" ] pub mod sr2 { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } impl super :: Sr2 { # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } } # [ doc = "Value of the field PEC" ] pub struct PecR { bits : u8 , } impl PecR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field DUALF" ] pub struct DualfR { bits : u8 , } impl DualfR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SMBHOST" ] pub struct SmbhostR { bits : u8 , } impl SmbhostR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field SMBDEFAULT" ] pub struct SmbdefaultR { bits : u8 , } impl SmbdefaultR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field GENCALL" ] pub struct GencallR { bits : u8 , } impl GencallR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field TRA" ] pub struct TraR { bits : u8 , } impl TraR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field BUSY" ] pub struct BusyR { bits : u8 , } impl BusyR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field MSL" ] pub struct MslR { bits : u8 , } impl MslR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _pec ( & self ) -> u8 { const MASK : u8 = 255 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 8:15 - acket error checking register" ] pub fn pec ( & self ) -> PecR { PecR { bits : self . _pec ( ) } } fn _dualf ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 7 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 7 - Dual flag (Slave mode)" ] pub fn dualf ( & self ) -> DualfR { DualfR { bits : self . _dualf ( ) } } fn _smbhost ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 6 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 6 - SMBus host header (Slave mode)" ] pub fn smbhost ( & self ) -> SmbhostR { SmbhostR { bits : self . _smbhost ( ) } } fn _smbdefault ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 5 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 5 - SMBus device default address (Slave mode)" ] pub fn smbdefault ( & self ) -> SmbdefaultR { SmbdefaultR { bits : self . _smbdefault ( ) } } fn _gencall ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 4 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 4 - General call address (Slave mode)" ] pub fn gencall ( & self ) -> GencallR { GencallR { bits : self . _gencall ( ) } } fn _tra ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 2 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 2 - Transmitter/receiver" ] pub fn tra ( & self ) -> TraR { TraR { bits : self . _tra ( ) } } fn _busy ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 1 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 1 - Bus busy" ] pub fn busy ( & self ) -> BusyR { BusyR { bits : self . _busy ( ) } } fn _msl ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 0 - Master/slave" ] pub fn msl ( & self ) -> MslR { MslR { bits : self . _msl ( ) } } } }

# [ doc = "Clock control register" ] # [ repr ( C ) ] pub struct Ccr { register : :: volatile_register :: RW < u32 > }

# [ doc = "Clock control register" ] pub mod ccr { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Ccr { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field F_S" ] pub struct FSR { bits : u8 , } impl FSR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field DUTY" ] pub struct DutyR { bits : u8 , } impl DutyR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = "Value of the field CCR" ] pub struct CcrR { bits : u16 , } impl CcrR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u16 { self . bits } } # [ doc = r" Proxy" ] pub struct _FSW < 'a > { register : & 'a mut W , } impl < 'a > _FSW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _DutyW < 'a > { register : & 'a mut W , } impl < 'a > _DutyW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } # [ doc = r" Proxy" ] pub struct _CcrW < 'a > { register : & 'a mut W , } impl < 'a > _CcrW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u16 ) -> & 'a mut W { const MASK : u16 = 4095 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _f_s ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 15 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 15 - I2C master mode selection" ] pub fn f_s ( & self ) -> FSR { FSR { bits : self . _f_s ( ) } } fn _duty ( & self ) -> u8 { const MASK : u8 = 1 ; const OFFSET : u8 = 14 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bit 14 - Fast mode duty cycle" ] pub fn duty ( & self ) -> DutyR { DutyR { bits : self . _duty ( ) } } fn _ccr ( & self ) -> u16 { const MASK : u16 = 4095 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u16 } # [ doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)" ] pub fn ccr ( & self ) -> CcrR { CcrR { bits : self . _ccr ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bit 15 - I2C master mode selection" ] pub fn f_s ( & mut self ) -> _FSW { _FSW { register : self , } } # [ doc = "Bit 14 - Fast mode duty cycle" ] pub fn duty ( & mut self ) -> _DutyW { _DutyW { register : self , } } # [ doc = "Bits 0:11 - Clock control register in Fast/Standard mode (Master mode)" ] pub fn ccr ( & mut self ) -> _CcrW { _CcrW { register : self , } } } }

# [ doc = "TRISE register" ] # [ repr ( C ) ] pub struct Trise { register : :: volatile_register :: RW < u32 > }

# [ doc = "TRISE register" ] pub mod trise { # [ doc = r" Value read from the register" ] pub struct R { bits : u32 , } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 , } impl super :: Trise { # [ doc = r" Modifies the contents of the register" ] pub fn modify < F > ( & mut self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W , { let bits = self . register . read ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . write ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] pub fn read ( & self ) -> R { R { bits : self . register . read ( ) } } # [ doc = r" Writes to the register" ] pub fn write < F > ( & mut self , f : F ) where F : FnOnce ( & mut W ) -> & mut W , { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . write ( w . bits ) ; } } # [ doc = "Value of the field TRISE" ] pub struct TriseR { bits : u8 , } impl TriseR { # [ doc = r" Value of the field as raw bits" ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _TriseW < 'a > { register : & 'a mut W , } impl < 'a > _TriseW < 'a > { # [ doc = r" Writes raw `bits` to the field" ] pub unsafe fn bits ( self , bits : u8 ) -> & 'a mut W { const MASK : u8 = 63 ; const OFFSET : u8 = 0 ; self . register . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . register . bits |= ( ( bits & MASK ) as u32 ) << OFFSET ; self . register } } impl R { # [ doc = r" Value of the register as raw bits" ] pub fn bits ( & self ) -> u32 { self . bits } fn _trise ( & self ) -> u8 { const MASK : u8 = 63 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } # [ doc = "Bits 0:5 - Maximum rise time in Fast/Standard mode (Master mode)" ] pub fn trise ( & self ) -> TriseR { TriseR { bits : self . _trise ( ) } } } impl W { # [ doc = r" Reset value of the register" ] pub fn reset_value ( ) -> W { W { bits : 2 } } # [ doc = r" Writes raw `bits` to the register" ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 0:5 - Maximum rise time in Fast/Standard mode (Master mode)" ] pub fn trise ( & mut self ) -> _TriseW { _TriseW { register : self , } } } }
